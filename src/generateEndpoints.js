const defaultConvention = {
    expressController: ({ usecase, parameters, parametersHandler, userHandler, controller, method, path }) => {
        return async (req, res, next) => {
            const request = parametersHandler(req, parameters)
            const user = userHandler(request)
            return await controller(usecase, request, user, res, next, method, path)
        }
    }
}

function generateEndpoints({ herbarium, server, convention = defaultConvention }) {
    
    const endpoints = []
    for (let uc of herbarium.usecases.all) {
        const [ucName, info] = uc
        const REST = info.REST

        if (!REST) throw new Error(`No REST metadata for usecase ${ucName}`)
        const usecase = info.usecase
        const { method, path, parameters } = REST
        if (!method) throw new Error(`'method' metadata is required. It is not possible to generate a REST endpoint for usecase ${ucName}.`)
        if (!path) throw new Error(`'path' metadata is required. It is not possible to generate a REST endpoint for usecase ${ucName}.`)
        if (!parameters) throw new Error(`'parameters' metadata is required. It is not possible to generate a REST endpoint for usecase ${ucName}.`)
        
        const paramsHandler = REST.parametersHandler || parametersHandler
        if (!paramsHandler) throw new Error(`'parametersHandler' metadata is required. It is not possible to generate a REST endpoint for usecase ${ucName}.`)
        
        const userHandler = REST.userHandler
        if (!userHandler) throw new Error(`'userHandler' metadata is required. It is not possible to generate a REST endpoint for usecase ${ucName}.`)
        
        const ctlr = REST.controller
        if (!ctlr) throw new Error(`'controller' metadata is required. It is not possible to generate a REST endpoint for usecase ${ucName}.`)

        // does not allow to generate an endpoint for the same path and method
        const endpoint = endpoints.find(ep => ep.method === method && ep.path === path)
        if (endpoint) 
            throw new Error(`It is not possible to generate a REST endpoint for usecase '${ucName}'. There is already an endpoint for method ${method} and path ${path} generated by usecase '${endpoint.ucName}'.`)
        endpoints.push({ ucName, method, path })
        
        const expressController = convention.expressController({ usecase, parameters, parametersHandler: paramsHandler, userHandler, controller: ctlr, method, path })

        if (method === 'GET') server.get(path, expressController)
        if (method === 'POST') server.post(path, expressController)
        if (method === 'PUT') server.put(path, expressController)
        if (method === 'DELETE') server.delete(path, expressController)
    }
}

module.exports = { generateEndpoints, convention: defaultConvention }