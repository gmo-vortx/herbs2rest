const { Endpoint } = require('./endpoint')
const { herbarium } = require("@herbsjs/herbarium")
const { NodeType } = require("../restEndpoint")

class RouteBuilder {

    static NodeType = 'RESTEndpoint'

    constructor({ herbarium, server }) {
        if (!herbarium) throw new Error("Herbarium is required")
        if (!server) throw new Error("Server is required")
        this.herbarium = herbarium
        this.server = server
        this.endpoints = []
    }

    attach() {
        for (let endpoint of herbarium.nodes.find({ type: NodeType })) {
            this.#attachEndpoint(endpoint)
        }
    }

    #attachEndpoint(endpoint) {
        const { server } = this
        const { method, path, usecase, parameters, parametersHandler, authorizationHandler, controller } = endpoint.value

        const endpointOwner = this.endpoints.find(ep => ep.method === method && ep.path === path)
        if (endpointOwner) throw new Error(`It is not possible to generate a REST endpoint for usecase '${usecase.id}'. There is already an endpoint for method ${method} and path ${path} generated by usecase '${endpointOwner.usecase.id}'.`)
        this.endpoints.push({ usecase, method, path })

        const ucNode = herbarium.nodes.get(usecase.id)
        const expressController = this.expressController({
            usecase: ucNode.value, parameters, parametersHandler, authorizationHandler, controller, method, path
        })
        const expressMethod = method.toLowerCase()
        server[expressMethod](path, expressController)
    }

    expressController({ usecase, parameters, parametersHandler, authorizationHandler, controller, method, path }) {
        return async (req, res, next) => {
            const authorizationInfo = await authorizationHandler(req)
            const request = await parametersHandler(usecase, req, parameters)
            return await controller({ usecase, request, authorizationInfo, res, next, method, path })
        }
    }
}

module.exports = { RouteBuilder }